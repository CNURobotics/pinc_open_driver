#!/usr/bin/env python3

# Copyright 2025 Christopher Newport University - CNU Robotics
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import rclpy
from rclpy.node import Node
from rcl_interfaces.srv import GetParameters

class ParameterChecker(Node):
    def __init__(self, param_name):
        super().__init__('parameter_checker')
        self.param_name = param_name

    def check_all_nodes(self):
        # Get all nodes (name, namespace) pairs
        node_names = self.get_node_names_and_namespaces()
        found_any = False

        for name, namespace, _ in node_names:
            fq_node_name = namespace.rstrip('/') + '/' + name
            if fq_node_name == '//ros2cli_daemon':  # Skip daemon
                continue

            service_name = fq_node_name + '/get_parameters'
            client = self.create_client(GetParameters, service_name)

            if not client.wait_for_service(timeout_sec=0.5):
                continue

            request = GetParameters.Request()
            request.names = [self.param_name]
            future = client.call_async(request)
            rclpy.spin_until_future_complete(self, future, timeout_sec=1.0)

            if future.result() is not None and future.result().values:
                value = future.result().values[0]
                print(f"{fq_node_name:<5s0} => {value}")
                found_any = True

        if not found_any:
            print(f"No nodes have parameter '{self.param_name}'")

    def get_node_names_and_namespaces(self):
        node_names = []
        for name, ns, enclave in self.get_node_names_and_namespaces_with_enclaves():
            node_names.append((name, ns, enclave))
        return node_names

def main():
    import sys
    if len(sys.argv) != 2:
        print("Script retrieves ROS 2 parameter values from specified node.")
        print("Usage: ros2 run pinc_hardware get_params <parameter_name>")
        print("   e.g.:  ros2 run pinc_hardware get_params use_sim_time")
        return

    param_name = sys.argv[1]
    rclpy.init()
    node = ParameterChecker(param_name)
    node.check_all_nodes()
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
